services:
  frontend:
    image: frontend
    ports:
      - 3000:3000
    stdin_open: true
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules
    restart: always
    networks:
      - react-express
    depends_on:
      - backend

  backend:
    restart: always
    image: backend
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - mongo
    networks:
      - express-mongo
      - react-express

  mongo:
    restart: always
    image: mongo:4.2.0
    volumes:
      - devops-mongo:/data/db
    networks:
      - express-mongo
    expose:
      - 27017

  # prometheus:
  #   image: prom/prometheus
  #   restart: always
  #   volumes:
  #     - ./etc/prometheus:/etc/prometheus/
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/usr/share/prometheus/console_libraries'
  #     - '--web.console.templates=/usr/share/prometheus/consoles'
  #   ports:
  #     - 9090:9090
  #   links:
  #     - cadvisor:cadvisor
  #     - alertmanager:alertmanager
  #   networks:
  #     - express-mongo
  #     - react-express
  #   depends_on:
  #     - cadvisor

  # node-exporter:
  #   image: prom/node-exporter
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #   command:
  #     - '--path.procfs=/host/proc'
  #     - '--path.sysfs=/host/sys'
  #     - --collector.filesystem.ignored-mount-points
  #     - '^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
  #   ports:
  #     - 9100:9100
  #   restart: always
  #   networks:
  #     - express-mongo
  #     - react-express
  #   deploy:
  #     mode: global

  # alertmanager:
  #   image: prom/alertmanager
  #   restart: always
  #   ports:
  #     - 9093:9093
  #   volumes:
  #     - ./etc/alertmanager/:/etc/alertmanager/
  #   command:
  #     - '--config.file=/etc/alertmanager/config.yml'
  #     - '--storage.path=/alertmanager'
  #   networks:
  #     - express-mongo
  #     - react-express

  # cadvisor:
  #   image: gcr.io/cadvisor/cadvisor
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:rw
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #   ports:
  #     - 8080:8080
  #   restart: always
  #   deploy:
  #     mode: global
  #   networks:
  #     - express-mongo
  #     - react-express

  # grafana:
  #   image: grafana/grafana
  #   user: '472'
  #   restart: always
  #   environment:
  #     GF_INSTALL_PLUGINS: 'grafana-clock-panel,grafana-simple-json-datasource'
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./etc/grafana/provisioning/:/etc/grafana/provisioning/
  #   env_file:
  #     - ./etc/grafana/config.monitoring
  #   ports:
  #     - 5001:5001
  #   depends_on:
  #     - prometheus
  #   networks:
  #     - express-mongo
  #     - react-express

volumes:
  devops-mongo:
  prometheus_data: {}
  grafana_data: {}

networks:
  react-express:
  express-mongo: